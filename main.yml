---
- name: "Creating AWS resources"
  hosts: localhost
  become: false
  vars_files:
    - creds.vars
  vars:
    region: "ap-south-1"
    project: "online-store"
    env: "dev"
    required_delay: "50"

  tasks:

    - name: "Creating SSH key pair"
      amazon.aws.ec2_key:
        name: "{{ project }}-{{ env }}"
        access_key: "{{ access_token }}"
        secret_key: "{{ secret_token }}"
        region: "{{ region }}"
      register: key_pair
 
    - name: "Saving private key"
      when: key_pair.changed
      copy:
        content: "{{key_pair.key.private_key}}"
        dest: "{{ project }}-{{ env }}.pem"
        mode: 0400

    - name: "Creating security group"
      amazon.aws.ec2_security_group:
        name: "{{ project }}-{{ env }}"
        description: "{{ project }}-{{ env }}"
        access_key: "{{ access_token }}"
        secret_key: "{{ secret_token }}"
        region: "{{region}}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all on port 80

          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all on port 443

          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all on port 22
        tags:
          Name: "{{ project }}-{{ env }}"
          Project: "{{ project }}"
          Environment: "{{ env }}"
      register: sg_status

        
    - name: "Creating EC2 instances"
      amazon.aws.ec2_instance:
        access_key: "{{ access_token }}"
        secret_key: "{{ secret_token }}"
        region: "{{ region }}"
        name: "webserver-{{ project }}-{{ env }}"
        key_name: "{{ key_pair.key.name }}"
        instance_type: t2.micro
        security_groups:
          - "{{ sg_status.group_id }}"
        image_id: ami-0e742cca61fb65051
        exact_count: 3
        tags:
          Project: "{{ project }}"
          Environment: "{{ env }}"
      register: instance_status
            
    - name: "waiting for instance to be up"
      when: instance_status.changed
      pause: 
        seconds: "{{ required_delay }}" 

    - name: "Gathering details of instances"
      amazon.aws.ec2_instance_info:
        region: "{{ region }}"
        filters:
          "tag:Project": "{{ project }}"
          "tag:Environment": "{{ env }}"
          "tag:Name": "webserver-{{ project }}-{{ env }}"
          instance-state-name: [ "running"]
      register: aws_instance_details
        
    - name: "Creating dynamic inventory"
      add_host:
        groups: "backend_instances"
        hostname: "{{ item.public_ip_address  }}"
        ansible_ssh_user: "ec2-user"
        ansible_ssh_host: '{{ item.public_ip_address  }}'
        ansible_ssh_port: "22"
        ansible_ssh_private_key_file: "{{ key_pair.key.name }}.pem" 
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
      with_items: "{{ aws_instance_details.instances }}"

- name: "Deploying website to backend instances"
  become: true
  hosts: backend_instances
  vars:
    repo_url: https://github.com/sreenidhiramachandran/aws-elb-site.git
    clone_dir: "/var/website/"
    httpd_owner: "apache"
    httpd_group: "apache"
    httpd_port: "80"
    httpd_domain: "backend.sreenidhi.tech"
    packages:
      - httpd
      - php
      - git

  tasks:
    - name: "Installing packages"
      yum:
        name: "{{packages}}"
        state: present
      notify:
        - apache-reload
  
    - name: "Creating httpd.conf from httpd.conf.j2 template"
      template:
        src: "./httpd.conf.j2"
        dest: "/etc/httpd/conf/httpd.conf"
      notify:
        - apache-reload

    - name: "Creating Virtualhost from virtualhost.conf.j2 template"
      template:
        src: "./virtualhost.conf.j2"
        dest: "/etc/httpd/conf.d/{{ httpd_domain }}.conf"
        owner: "{{httpd_owner}}"
        group: "{{httpd_group}}"
      notify:
        - apache-reload

    - name: "Creating document root /var/www/html/{{ httpd_domain }}"
      file:
        path: "/var/www/html/{{ httpd_domain }}"
        state: directory
        owner: "{{httpd_owner}}"
        group: "{{httpd_group}}"        
        
    - name: "Creating clone directory {{clone_dir}}"
      file:
        path: "{{clone_dir}}"
        state: directory

    - name: "Clone website contents from {{repo_url}}"
      git:
        repo: "{{ repo_url }}"
        dest: "{{clone_dir}}"
        force: true
      register: clone_status
      notify:
        - apache-restart

    - name: "Copying files to /var/www/html/{{ httpd_domain }}"
      when: clone_status.changed == true
      copy:
        src: "{{clone_dir}}"
        dest: "/var/www/html/{{ httpd_domain }}"
        remote_src: true
        owner: "{{httpd_owner}}"
        group: "{{httpd_group}}"
      notify:
        - apache-restart

  handlers:

    - name: "apache-restart"
      service:
        name: httpd
        state: restarted
        enabled: true

    - name: "apache-reload"
      service:
        name: httpd
        state: reloaded
        enabled: true 
